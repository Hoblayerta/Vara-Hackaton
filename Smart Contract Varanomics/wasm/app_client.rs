// Code generated by sails-client-gen. DO NOT EDIT.
#[allow(unused_imports)]
use sails_rs::collections::BTreeMap;
#[allow(unused_imports)]
use sails_rs::{
    calls::{Activation, Call, Query, Remoting, RemotingAction},
    prelude::*,
    String,
};
pub struct AppFactory<R> {
    #[allow(dead_code)]
    remoting: R,
}
impl<R> AppFactory<R> {
    #[allow(unused)]
    pub fn new(remoting: R) -> Self {
        Self { remoting }
    }
}
impl<R: Remoting + Clone> traits::AppFactory for AppFactory<R> {
    type Args = R::Args;
    fn new(&self) -> impl Activation<Args = R::Args> {
        RemotingAction::<_, app_factory::io::New>::new(self.remoting.clone(), ())
    }
}

pub mod app_factory {
    use super::*;
    pub mod io {
        use super::*;
        use sails_rs::calls::ActionIo;
        pub struct New(());
        impl New {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <New as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for New {
            const ROUTE: &'static [u8] = &[12, 78, 101, 119];
            type Params = ();
            type Reply = ();
        }
    }
}
pub struct Service<R> {
    remoting: R,
}
impl<R> Service<R> {
    pub fn new(remoting: R) -> Self {
        Self { remoting }
    }
}
impl<R: Remoting + Clone> traits::Service for Service<R> {
    type Args = R::Args;
    fn handle_receive(
        &mut self,
        user: ActorId,
        description: String,
        number1: u32,
        number2: u32,
    ) -> impl Call<Output = Events, Args = R::Args> {
        RemotingAction::<_, service::io::HandleReceive>::new(
            self.remoting.clone(),
            (user, description, number1, number2),
        )
    }
    fn register_entry(
        &mut self,
        user: ActorId,
        description: String,
        number1: u32,
        number2: u32,
    ) -> impl Call<Output = Events, Args = R::Args> {
        RemotingAction::<_, service::io::RegisterEntry>::new(
            self.remoting.clone(),
            (user, description, number1, number2),
        )
    }
    fn handle_request_data(
        &self,
        user: ActorId,
    ) -> impl Query<Output = Option<(String, u32, u32)>, Args = R::Args> {
        RemotingAction::<_, service::io::HandleRequestData>::new(self.remoting.clone(), user)
    }
    fn query_get_admins(&self) -> impl Query<Output = Vec<ActorId>, Args = R::Args> {
        RemotingAction::<_, service::io::QueryGetAdmins>::new(self.remoting.clone(), ())
    }
    fn query_get_all_users(&self) -> impl Query<Output = Vec<(ActorId, String)>, Args = R::Args> {
        RemotingAction::<_, service::io::QueryGetAllUsers>::new(self.remoting.clone(), ())
    }
    fn query_get_registered_entries(
        &self,
    ) -> impl Query<Output = Vec<CustomStruct>, Args = R::Args> {
        RemotingAction::<_, service::io::QueryGetRegisteredEntries>::new(self.remoting.clone(), ())
    }
}

pub mod service {
    use super::*;

    pub mod io {
        use super::*;
        use sails_rs::calls::ActionIo;
        pub struct HandleReceive(());
        impl HandleReceive {
            #[allow(dead_code)]
            pub fn encode_call(
                user: ActorId,
                description: String,
                number1: u32,
                number2: u32,
            ) -> Vec<u8> {
                <HandleReceive as ActionIo>::encode_call(&(user, description, number1, number2))
            }
        }
        impl ActionIo for HandleReceive {
            const ROUTE: &'static [u8] = &[
                28, 83, 101, 114, 118, 105, 99, 101, 52, 72, 97, 110, 100, 108, 101, 82, 101, 99,
                101, 105, 118, 101,
            ];
            type Params = (ActorId, String, u32, u32);
            type Reply = super::Events;
        }
        pub struct RegisterEntry(());
        impl RegisterEntry {
            #[allow(dead_code)]
            pub fn encode_call(
                user: ActorId,
                description: String,
                number1: u32,
                number2: u32,
            ) -> Vec<u8> {
                <RegisterEntry as ActionIo>::encode_call(&(user, description, number1, number2))
            }
        }
        impl ActionIo for RegisterEntry {
            const ROUTE: &'static [u8] = &[
                28, 83, 101, 114, 118, 105, 99, 101, 52, 82, 101, 103, 105, 115, 116, 101, 114, 69,
                110, 116, 114, 121,
            ];
            type Params = (ActorId, String, u32, u32);
            type Reply = super::Events;
        }
        pub struct HandleRequestData(());
        impl HandleRequestData {
            #[allow(dead_code)]
            pub fn encode_call(user: ActorId) -> Vec<u8> {
                <HandleRequestData as ActionIo>::encode_call(&user)
            }
        }
        impl ActionIo for HandleRequestData {
            const ROUTE: &'static [u8] = &[
                28, 83, 101, 114, 118, 105, 99, 101, 68, 72, 97, 110, 100, 108, 101, 82, 101, 113,
                117, 101, 115, 116, 68, 97, 116, 97,
            ];
            type Params = ActorId;
            type Reply = Option<(String, u32, u32)>;
        }
        pub struct QueryGetAdmins(());
        impl QueryGetAdmins {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <QueryGetAdmins as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for QueryGetAdmins {
            const ROUTE: &'static [u8] = &[
                28, 83, 101, 114, 118, 105, 99, 101, 56, 81, 117, 101, 114, 121, 71, 101, 116, 65,
                100, 109, 105, 110, 115,
            ];
            type Params = ();
            type Reply = Vec<ActorId>;
        }
        pub struct QueryGetAllUsers(());
        impl QueryGetAllUsers {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <QueryGetAllUsers as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for QueryGetAllUsers {
            const ROUTE: &'static [u8] = &[
                28, 83, 101, 114, 118, 105, 99, 101, 64, 81, 117, 101, 114, 121, 71, 101, 116, 65,
                108, 108, 85, 115, 101, 114, 115,
            ];
            type Params = ();
            type Reply = Vec<(ActorId, String)>;
        }
        pub struct QueryGetRegisteredEntries(());
        impl QueryGetRegisteredEntries {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <QueryGetRegisteredEntries as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for QueryGetRegisteredEntries {
            const ROUTE: &'static [u8] = &[
                28, 83, 101, 114, 118, 105, 99, 101, 100, 81, 117, 101, 114, 121, 71, 101, 116, 82,
                101, 103, 105, 115, 116, 101, 114, 101, 100, 69, 110, 116, 114, 105, 101, 115,
            ];
            type Params = ();
            type Reply = Vec<super::CustomStruct>;
        }
    }
}
#[derive(PartialEq, Clone, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub enum Events {
    EntryRegistered(ActorId),
    Received(ActorId),
}
#[derive(PartialEq, Clone, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub struct CustomStruct {
    pub user: ActorId,
    pub description: String,
    pub number1: u32,
    pub number2: u32,
}

pub mod traits {
    use super::*;
    #[allow(dead_code)]
    pub trait AppFactory {
        type Args;
        #[allow(clippy::new_ret_no_self)]
        #[allow(clippy::wrong_self_convention)]
        fn new(&self) -> impl Activation<Args = Self::Args>;
    }

    #[allow(clippy::type_complexity)]
    pub trait Service {
        type Args;
        fn handle_receive(
            &mut self,
            user: ActorId,
            description: String,
            number1: u32,
            number2: u32,
        ) -> impl Call<Output = Events, Args = Self::Args>;
        fn register_entry(
            &mut self,
            user: ActorId,
            description: String,
            number1: u32,
            number2: u32,
        ) -> impl Call<Output = Events, Args = Self::Args>;
        fn handle_request_data(
            &self,
            user: ActorId,
        ) -> impl Query<Output = Option<(String, u32, u32)>, Args = Self::Args>;
        fn query_get_admins(&self) -> impl Query<Output = Vec<ActorId>, Args = Self::Args>;
        fn query_get_all_users(
            &self,
        ) -> impl Query<Output = Vec<(ActorId, String)>, Args = Self::Args>;
        fn query_get_registered_entries(
            &self,
        ) -> impl Query<Output = Vec<CustomStruct>, Args = Self::Args>;
    }
}
